// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screenAddress;
    static boolean drawColor;
    static Array powersOfTwo;

    /** Initializes the Screen. */
    function void init() {
        var int i;

        let screenAddress = 16384;
        let drawColor = true;  // true 表示黑色
        let powersOfTwo = Array.new(16);

        let powersOfTwo[0] = 1;
        let i = 1;
        while (i < 16) {
            let powersOfTwo[i] = powersOfTwo[i-1] + powersOfTwo[i-1];
            let i = i + 1;
        }

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        let i = 0;
        while (i < 8192) {
            let screenAddress[i] = false; // 逐个清 0
            let i = i + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let drawColor = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        // 以字为单位进行绘制，此时一行是 32 个字
        var int address;
        var int mask;

        let address = (y * 32) + (x / 16);
        let mask = powersOfTwo[x & 15];

        if (drawColor) {
            let screenAddress[address] = screenAddress[address] | mask;  // 白屏黑字
        }
        else {
            let screenAddress[address] = screenAddress[address] & ~mask;  // 黑屏白字
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        // 分为四种一般情况和两种特殊的情况
        var int a, b, dx, dy, adyMinusbdx;
        var int temp;

        // 始终从左往右画
        if (x1 > x2) {
            let temp = x2;
            let x2 = x1;
            let x1 = temp;

            let temp = y2;
            let y2 = y1;
            let y1 = temp;
        }

        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);

        if (dx = 0) {  // 需要特殊处理的水平线和竖线
            // 竖线
            let y1 = Math.min(y1, y2);
            while (~(b > dy)) {
                do Screen.drawPixel(x1, y1 + b);
                let b = b + 1;
            }
            return;
        }

        let a = 0;
        let b = 0;

        if (dy = 0) {
            // 水平线
            while (~(a > dx)) {
                do Screen.drawPixel(x1 + a, y1);
                let a = a + 1;
            }
            return;
        }

        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;
        if (y1 < y2) {
            while (~(a > dx) & ~(b > dy)) {
                do Screen.drawPixel(x1 + a, y1 + b);

                if (adyMinusbdx < 0) {
                    let a = a + 1;
                    let adyMinusbdx = adyMinusbdx + dy;
                }
                else {
                    let b = b + 1;
                    let adyMinusbdx = adyMinusbdx - dx;
                }
            }
        } else {
            while (~(a > dx) & ~(b > dy)) {
                do Screen.drawPixel(x1 + a, y1 - b);

                if (adyMinusbdx < 0) {
                    let a = a + 1;
                    let adyMinusbdx = adyMinusbdx + dy;
                }
                else {
                    let b = b + 1;
                    let adyMinusbdx = adyMinusbdx - dx;
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int temp;

        if (y1 > y2) {
            let temp = y2;
            let y2 = y1;
            let y1 = temp;
        }

        if (x1 > x2) {
            let temp = x2;
            let x2 = x1;
            let x1 = temp;
        }

        // do Screen.drawLine(x1, y1, x2, y1);  // 上边
        // do Screen.drawLine(x1, y1, x1, y2);  // 左边
        // do Screen.drawLine(x1, y2, x2, y2); // 下边
        // do Screen.drawLine(x2, y1, x2, y2); // 右边
        // 需要填充中间的内容
        while (~(y1 > y2)) {
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        var int d;

        let dy = -r;

        while (~(dy > r)) {
            let d = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x - d, y + dy, x + d, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
