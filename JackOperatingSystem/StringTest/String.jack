// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array charArray;
    field int length;
    field int maxLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLen = 1;  // 0 is not allowed，否则测试无法通过

        } else {
            let maxLen = maxLength;
        }
        let length = 0;
        let charArray = Array.new(maxLen);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
       do charArray.dispose();
       return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return charArray[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let charArray[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < maxLen) {
            let charArray[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        // 存在负数需要判断
        var int i;
        var int v;
        var int d;
        var boolean isNegative;

        let i = 0;
        if (charArray[i] = 45) {
            let isNegative = true;
            let i = i + 1;
        } else {
            let isNegative = false;
        }

        let v = 0;
        while ((i < length) & ~(charArray[i] < 48) & ~(charArray[i] > 57)) {
            let d = charArray[i] - 48;
            let v = v * 10 + d;
            let i = i + 1;
        }
        if (isNegative) {
            return -v;
        } else {
            return v;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit;
        var Array absVal;
        var int curLen;
        var int c;

        let length = 0;

        if (val < 0) {
            let val = -val;
            do appendChar(45);
        }

        let absVal = Array.new(maxLen);
        let curLen = 0;
        while (~(val < 10)) {
            let lastDigit = val - ((val / 10) * 10);
            let c = lastDigit + 48;
            let val = val / 10;
            let absVal[curLen] = c;
            let curLen = curLen + 1;
        }
        let c = val + 48;
        let absVal[curLen] = c;
        let curLen = curLen + 1;

        while (curLen > 0) {
            let curLen = curLen - 1;
            let c = absVal[curLen];
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
